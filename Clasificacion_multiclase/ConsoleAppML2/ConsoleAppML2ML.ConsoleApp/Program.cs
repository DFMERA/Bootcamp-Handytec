// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.IO;
using System.Linq;
using Microsoft.ML;
using ConsoleAppML2ML.Model;

namespace ConsoleAppML2ML.ConsoleApp
{
    class Program
    {
        //Dataset to use for predictions 
        private const string DATA_FILEPATH = @"C:\Users\dfmera\AppData\Local\Temp\dce07e88-0d79-4962-9f6e-763543cc4d28.tsv";

        static void Main(string[] args)
        {
            // Create single instance of sample data from first line of dataset for model input
            ModelInput sampleData = CreateSingleDataSample(DATA_FILEPATH);

            // Make a single prediction on the sample data and print results
            var predictionResult = ConsumeModel.Predict(sampleData);

            Console.WriteLine("Using model to make single prediction -- Comparing actual Reservation_status with predicted Reservation_status from sample data...\n\n");
            Console.WriteLine($"id: {sampleData.Id}");
            Console.WriteLine($"hotel: {sampleData.Hotel}");
            Console.WriteLine($"is_canceled: {sampleData.Is_canceled}");
            Console.WriteLine($"lead_time: {sampleData.Lead_time}");
            Console.WriteLine($"arrival_date_year: {sampleData.Arrival_date_year}");
            Console.WriteLine($"arrival_date_month: {sampleData.Arrival_date_month}");
            Console.WriteLine($"arrival_date_week_number: {sampleData.Arrival_date_week_number}");
            Console.WriteLine($"arrival_date_day_of_month: {sampleData.Arrival_date_day_of_month}");
            Console.WriteLine($"stays_in_weekend_nights: {sampleData.Stays_in_weekend_nights}");
            Console.WriteLine($"stays_in_week_nights: {sampleData.Stays_in_week_nights}");
            Console.WriteLine($"adults: {sampleData.Adults}");
            Console.WriteLine($"children: {sampleData.Children}");
            Console.WriteLine($"babies: {sampleData.Babies}");
            Console.WriteLine($"meal: {sampleData.Meal}");
            Console.WriteLine($"country: {sampleData.Country}");
            Console.WriteLine($"market_segment: {sampleData.Market_segment}");
            Console.WriteLine($"distribution_channel: {sampleData.Distribution_channel}");
            Console.WriteLine($"is_repeated_guest: {sampleData.Is_repeated_guest}");
            Console.WriteLine($"previous_cancellations: {sampleData.Previous_cancellations}");
            Console.WriteLine($"previous_bookings_not_canceled: {sampleData.Previous_bookings_not_canceled}");
            Console.WriteLine($"reserved_room_type: {sampleData.Reserved_room_type}");
            Console.WriteLine($"assigned_room_type: {sampleData.Assigned_room_type}");
            Console.WriteLine($"booking_changes: {sampleData.Booking_changes}");
            Console.WriteLine($"deposit_type: {sampleData.Deposit_type}");
            Console.WriteLine($"agent: {sampleData.Agent}");
            Console.WriteLine($"company: {sampleData.Company}");
            Console.WriteLine($"days_in_waiting_list: {sampleData.Days_in_waiting_list}");
            Console.WriteLine($"customer_type: {sampleData.Customer_type}");
            Console.WriteLine($"adr: {sampleData.Adr}");
            Console.WriteLine($"required_car_parking_spaces: {sampleData.Required_car_parking_spaces}");
            Console.WriteLine($"total_of_special_requests: {sampleData.Total_of_special_requests}");
            Console.WriteLine($"reservation_status_date: {sampleData.Reservation_status_date}");
            Console.WriteLine($"\n\nActual Reservation_status: {sampleData.Reservation_status} \nPredicted Reservation_status value {predictionResult.Prediction} \nPredicted Reservation_status scores: [{String.Join(",", predictionResult.Score)}]\n\n");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }

        // Change this code to create your own sample data
        #region CreateSingleDataSample
        // Method to load single row of dataset to try a single prediction
        private static ModelInput CreateSingleDataSample(string dataFilePath)
        {
            // Create MLContext
            MLContext mlContext = new MLContext();

            // Load dataset
            IDataView dataView = mlContext.Data.LoadFromTextFile<ModelInput>(
                                            path: dataFilePath,
                                            hasHeader: true,
                                            separatorChar: '\t',
                                            allowQuoting: true,
                                            allowSparse: false);

            // Use first line of dataset as model input
            // You can replace this with new test data (hardcoded or from end-user application)
            ModelInput sampleForPrediction = mlContext.Data.CreateEnumerable<ModelInput>(dataView, false)
                                                                        .First();
            return sampleForPrediction;
        }
        #endregion
    }
}
